"use strict";(self.webpackChunkwhatap_docs=self.webpackChunkwhatap_docs||[]).push([["15747"],{3153:function(e,n,t){t.r(n),t.d(n,{default:()=>d,frontMatter:()=>i,metadata:()=>r,assets:()=>l,toc:()=>c,contentTitle:()=>o});var r=JSON.parse('{"id":"telegraf/telegraf-usage","title":"\uC0AC\uC6A9 \uC608\uC2DC","description":"\uC0AC\uC6A9 \uC608\uC2DC\uB97C \uC548\uB0B4\uD569\uB2C8\uB2E4.","source":"@site/docs/telegraf/telegraf-usage.mdx","sourceDirName":"telegraf","slug":"/telegraf/telegraf-usage","permalink":"/whatap-docs/telegraf/telegraf-usage","draft":false,"unlisted":false,"editUrl":"undefined/docs/telegraf/telegraf-usage.mdx","tags":[],"version":"current","frontMatter":{"id":"telegraf-usage","title":"\uC0AC\uC6A9 \uC608\uC2DC","description":"\uC0AC\uC6A9 \uC608\uC2DC\uB97C \uC548\uB0B4\uD569\uB2C8\uB2E4.","keywords":["Telegraf","\uC0AC\uC6A9 \uC608\uC2DC"],"isTranslationMissing":false},"sidebar":"pluginSidebar","previous":{"title":"\uAD00\uB9AC\uD558\uAE30","permalink":"/whatap-docs/telegraf/manage"},"next":{"title":"OpenTelemetry \uC18C\uAC1C","permalink":"/whatap-docs/opentelemetry/introduction"}}'),a=t("85893"),s=t("50065");let i={id:"telegraf-usage",title:"\uC0AC\uC6A9 \uC608\uC2DC",description:"\uC0AC\uC6A9 \uC608\uC2DC\uB97C \uC548\uB0B4\uD569\uB2C8\uB2E4.",keywords:["Telegraf","\uC0AC\uC6A9 \uC608\uC2DC"],isTranslationMissing:!1},o=void 0,l={},c=[{value:"SNMP",id:"snmp",level:2},{value:"SNMP Trap",id:"snmp-trap",level:2}];function p(e){let n={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",section:"section",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["Telegraf\uC5D0 \uAD00\uD55C \uC790\uC138\uD55C \uB0B4\uC6A9\uC740 influxdata\uC758 ",(0,a.jsx)(n.a,{href:"https://docs.influxdata.com/telegraf/v1.24/",children:"Telegraf documentation"}),"\uC744 \uCC38\uC870\uD558\uC138\uC694."]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Telegraf \uD50C\uB7EC\uADF8\uC778 \uBC0F \uC5D0\uC774\uC804\uD2B8\uB294 \uC0AC\uC6A9\uC790\uAC00 \uD574\uB2F9 \uC11C\uBE44\uC2A4\uC5D0 \uC9C1\uC811 \uC124\uCE58\uD558\uACE0 \uC124\uC815\uD574\uC57C \uD569\uB2C8\uB2E4."})}),"\n",(0,a.jsxs)(n.section,{className:"remark-sectionize-h2",children:[(0,a.jsx)(n.h2,{id:"snmp",children:"SNMP"}),(0,a.jsxs)(n.p,{children:["SNMP input plugin\uC744 \uC0AC\uC6A9\uD558\uC5EC SNMP \uC131\uB2A5 \uB370\uC774\uD130\uB97C \uC2E4\uC2DC\uAC04\uC73C\uB85C \uC218\uC9D1 \uBC0F \uCC28\uD2B8 \uD45C\uC2DC \uAC00\uB2A5\uD569\uB2C8\uB2E4. \uC218\uC9D1\uB41C \uB370\uC774\uD130\uB294 ",(0,a.jsx)(n.code,{children:"telegraf_snmp"}),", ",(0,a.jsx)(n.code,{children:"telegraf_interface"})," \uCE74\uD14C\uACE0\uB9AC\uB85C \uAC80\uC0C9\uD558\uC2E4 \uC218 \uC788\uC2B5\uB2C8\uB2E4."]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-batch",metastring:"title='Linux Shell'",children:'cat >/etc/telegraf/telegraf.d/snmp_device.conf <<EOL\n[[inputs.snmp]]\n  ## Agent addresses to retrieve values from.\n  ##   format:  agents = ["<scheme://><hostname>:<port>"]\n  ##   scheme:  optional, either udp, udp4, udp6, tcp, tcp4, tcp6.\n  ##            default is udp\n  ##   port:    optional\n  ##   example: agents = ["udp://127.0.0.1:161"]\n  ##            agents = ["tcp://127.0.0.1:161"]\n  ##            agents = ["udp4://v4only-snmp-agent"]\n\n  agents = ["udp://1.1.1.1:161"]\n\n  ## Timeout for each request.\n  # timeout = "5s"\n\n  ## SNMP version; can be 1, 2, or 3.\n   version = 2\n\n  ## SNMP community string.\n   community = "xxxx@xxxxx"\n\n  ## Agent host tag\n  # agent_host_tag = "agent_host"\n\n  ## Number of retries to attempt.\n  # retries = 3\n\n  ## The GETBULK max-repetitions parameter.\n  # max_repetitions = 10\n\n  ## SNMPv3 authentication and encryption options.\n  ##\n  ## Security Name.\n  # sec_name = "myuser"\n  ## Authentication protocol; one of "MD5", "SHA", "SHA224", "SHA256", "SHA384", "SHA512" or "".\n  # auth_protocol = "MD5"\n  ## Authentication password.\n  # auth_password = "pass"\n  ## Security Level; one of "noAuthNoPriv", "authNoPriv", or "authPriv".\n  # sec_level = "authNoPriv"\n  ## Context Name.\n  # context_name = ""\n  ## Privacy protocol used for encrypted messages; one of "DES", "AES", "AES192", "AES192C", "AES256", "AES256C", or "".\n  ### Protocols "AES192", "AES192", "AES256", and "AES256C" require the underlying net-snmp tools\n  ### to be compiled with --enable-blumenthal-aes (http://www.net-snmp.org/docs/INSTALL.html)\n  # priv_protocol = ""\n  ## Privacy password used for encrypted messages.\n  # priv_password = ""\n\n  ## Add fields and tables defining the variables you wish to collect.  This\n  ## example collects the system uptime and interface variables.  Reference the\n  ## full plugin documentation for configuration details.\n  [[inputs.snmp.field]]\n    oid = "RFC1213-MIB::sysUpTime.0"\n    name = "uptime"\n\n  [[inputs.snmp.field]]\n    oid = "RFC1213-MIB::sysName.0"\n    name = "source"\n    is_tag = true\n\n  [[inputs.snmp.table]]\n    oid = "IF-MIB::ifXTable"\n    name = "interface"\n    inherit_tags = ["source"]\n\n  [[inputs.snmp.table.field]]\n    oid = "IF-MIB::ifDescr"\n    name = "ifDescr"\n    is_tag = true\n\n  [[aggregators.derivative]]\n    period = "60s"\n    max_roll_over = 1\n\n    fieldpass = ["*Octets", "*Pkts"]\n    drop_original = false\n\n  [aggregators.derivative.tags]\n    aggr = "derivative"\n\n[[processors.starlark]]\n  source = \'\'\'\ndef apply(metric):\n    for (k, v) in metric.fields.items():\n        if k.endswith(\'Octets_rate\'):\n            metric.fields[k] *= 8\n\n    return metric\n\n\'\'\'\n\nEOL\nservice telegraf restart\n'})})]}),"\n",(0,a.jsxs)(n.section,{className:"remark-sectionize-h2",children:[(0,a.jsx)(n.h2,{id:"snmp-trap",children:"SNMP Trap"}),(0,a.jsxs)(n.p,{children:["SNMP Trap input plugin\uC744 \uC0AC\uC6A9\uD558\uC5EC SNMP Trap \uC774\uBCA4\uD2B8\uB97C \uC2E4\uC2DC\uAC04\uC73C\uB85C \uC218\uC9D1 \uBC0F \uC774\uBA54\uC77C, \uBB38\uC790 \uBA54\uC2DC\uC9C0 \uBC0F \uBA54\uC2E0\uC800\uB85C \uC804\uD30C \uAC00\uB2A5\uD569\uB2C8\uB2E4. \uC218\uC9D1\uB41C \uB370\uC774\uD130\uB294 ",(0,a.jsx)(n.code,{children:"telegraf_snmp_trap"})," \uCE74\uD14C\uACE0\uB9AC\uB85C \uAC80\uC0C9\uD558\uC2E4 \uC218 \uC788\uC2B5\uB2C8\uB2E4."]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-batch",metastring:"title='Linux Shell'",children:'cat >/etc/telegraf/telegraf.d/snmp_trap.conf <<EOL\n[[inputs.snmp_trap]]\n  service_address = "udp://:162"\nEOL\nservice telegraf restart\n'})})]})]})}function d(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return i}});var r=t(67294);let a={},s=r.createContext(a);function i(e){let n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkwhatap_docs=self.webpackChunkwhatap_docs||[]).push([["31407"],{1179:function(e,s,r){r.d(s,{Ay:()=>i,RM:()=>n});var t=r(74848),d=r(84429);let n=[{value:"agent_status_summary",id:"agent_status_summary",level:2},{value:"Fields",id:"agent_status_summary_filed",level:3}];function c(e){let s={code:"code",h2:"h2",h3:"h3",p:"p",section:"section",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components},{Xclude:r}=s;return r||function(e,s){throw Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Xclude",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.section,{className:"remark-sectionize-h2",children:[(0,t.jsx)(s.h2,{id:"agent_status_summary",children:"agent_status_summary"}),(0,t.jsx)(s.p,{children:"This category collects metrics related to agent status every 10 seconds."})]}),"\n",(0,t.jsxs)(s.section,{className:"remark-sectionize-h3",children:[(0,t.jsx)(s.h3,{id:"agent_status_summary_filed",children:"Fields"}),(0,t.jsx)(r,{product:"server,kubernetes",children:(0,t.jsx)("div",{className:"c4-20-10-10-60",children:(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Field"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Unit"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"inActTime"}),(0,t.jsx)(s.td,{children:"-"}),(0,t.jsx)(s.td,{children:"Millisecond(ms)"}),(0,t.jsx)(s.td,{children:"Amount of time the agent remains inactive"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"isActive"}),(0,t.jsx)(s.td,{children:"Boolean"}),(0,t.jsx)(s.td,{children:"-"}),(0,t.jsx)(s.td,{children:"Whether the agent is active or not"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"isRestart"}),(0,t.jsx)(s.td,{children:"Boolean"}),(0,t.jsx)(s.td,{children:"-"}),(0,t.jsxs)(s.td,{children:["Whether the agent was restarted recently (",(0,t.jsx)(s.code,{children:"true"})," / ",(0,t.jsx)(s.code,{children:"false"}),")"]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"lastActTime"}),(0,t.jsx)(s.td,{children:"-"}),(0,t.jsx)(s.td,{children:"Millisecond(ms)"}),(0,t.jsxs)(s.td,{children:["Last time when the agent was activated (",(0,t.jsx)(s.code,{children:"0"}),": Disabled)"]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"oid"}),(0,t.jsx)(s.td,{children:"-"}),(0,t.jsx)(s.td,{children:"-"}),(0,t.jsx)(s.td,{children:"Unique IDs for each agent in the project"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"startTime"}),(0,t.jsx)(s.td,{children:"-"}),(0,t.jsx)(s.td,{children:"Millisecond(ms)"}),(0,t.jsx)(s.td,{children:"Timestamp when the agent was started."})]})]})]})})})]})]})}function i(e={}){let{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},56141:function(e,s,r){r.d(s,{Ay:()=>i,RM:()=>n});var t=r(74848),d=r(84429);let n=[{value:"XOS-related metrics",id:"xosmetrics",level:2}];function c(e){let s={code:"code",h2:"h2",p:"p",section:"section",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,t.jsxs)(s.section,{className:"remark-sectionize-h2",children:[(0,t.jsx)(s.h2,{id:"xosmetrics",children:"XOS-related metrics"}),(0,t.jsx)(s.p,{children:"The following describes the metrics collected from the XOS agent."}),(0,t.jsx)("div",{class:"metric",children:(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Metric"}),(0,t.jsx)(s.th,{children:"Unit"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"cpu(xos)"})}),(0,t.jsx)(s.td,{children:"pct"}),(0,t.jsxs)(s.td,{children:["CPU utilization",(0,t.jsx)("br",{})," ",(0,t.jsx)(s.code,{children:"cpu_user"})," + ",(0,t.jsx)(s.code,{children:"cpu_sys"})," + ",(0,t.jsx)(s.code,{children:"cpu_iowait"})]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"cpu_idle(xos)"})}),(0,t.jsx)(s.td,{children:"pct"}),(0,t.jsx)(s.td,{children:"CPU idle time"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"cpu_iowait(xos)"})}),(0,t.jsx)(s.td,{children:"pct"}),(0,t.jsx)(s.td,{children:"CPU's I/O waiting time"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"cpu_sys(xos)"})}),(0,t.jsx)(s.td,{children:"pct"}),(0,t.jsx)(s.td,{children:"CPU's kernel code execution time"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"cpu_user(xos)"})}),(0,t.jsx)(s.td,{children:"pct"}),(0,t.jsx)(s.td,{children:"CPU's user code execution time"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"disk_read_bytes(xos)"})}),(0,t.jsx)(s.td,{children:"byte"}),(0,t.jsx)(s.td,{children:"Number of data blocks read from disk"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"disk_reads(xos)"})}),(0,t.jsx)(s.td,{children:"block"}),(0,t.jsx)(s.td,{children:"Number of buffers read from disk"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"disk_write_bytes(xos)"})}),(0,t.jsx)(s.td,{children:"byte"}),(0,t.jsx)(s.td,{children:"Number of pages written to disk"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"disk_writes(xos)"})}),(0,t.jsx)(s.td,{children:"block"}),(0,t.jsx)(s.td,{children:"Number of buffers written to disk"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"mem(xos)"})}),(0,t.jsx)(s.td,{children:"pct"}),(0,t.jsx)(s.td,{children:"Memory utilization"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"mem_available(xos)"})}),(0,t.jsx)(s.td,{children:"MB"}),(0,t.jsx)(s.td,{children:"Shared memory size"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"mem_buffcache(xos)"})}),(0,t.jsx)(s.td,{children:"MB"}),(0,t.jsx)(s.td,{children:"Amount of memory used by the buff/cache"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"mem_free(xos)"})}),(0,t.jsx)(s.td,{children:"MB"}),(0,t.jsx)(s.td,{children:"Memory not in use"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"mem_swapfree(xos)"})}),(0,t.jsx)(s.td,{children:"MB"}),(0,t.jsxs)(s.td,{children:["Unused swap space size",(0,t.jsx)("br",{})," Because swap uses disk space, it may cause performance degradation."]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"mem_swaptotal(xos)"})}),(0,t.jsx)(s.td,{children:"MB"}),(0,t.jsxs)(s.td,{children:["Total swap size",(0,t.jsx)("br",{})," It is used when physical memory is insufficient."]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"mem_total(xos)"})}),(0,t.jsx)(s.td,{children:"MB"}),(0,t.jsx)(s.td,{children:"Total memory size"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"mem_used(xos)"})}),(0,t.jsx)(s.td,{children:"MB"}),(0,t.jsx)(s.td,{children:"Memory size in use"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"net_recv_bytes(xos)"})}),(0,t.jsx)(s.td,{children:"byte"}),(0,t.jsx)(s.td,{children:"Amount of data transmitted over the network"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"net_recv_packets(xos)"})}),(0,t.jsx)(s.td,{children:"count"}),(0,t.jsx)(s.td,{children:"Number of data packets transmitted over the network"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"net_send_bytes(xos)"})}),(0,t.jsx)(s.td,{children:"byte"}),(0,t.jsx)(s.td,{children:"Amount of data transmitted over the network"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"net_send_packets(xos)"})}),(0,t.jsx)(s.td,{children:"count"}),(0,t.jsx)(s.td,{children:"Number of data packets transmitted over the network"})]})]})]})})]})}function i(e={}){let{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},83548:function(e,s,r){r.r(s),r.d(s,{metadata:()=>t,default:()=>j,frontMatter:()=>o,contentTitle:()=>l,toc:()=>x,assets:()=>h});var t=JSON.parse('{"id":"mongodb/metrics-data-list","title":"MongoDB Metrics","description":"It guides you to MongoDB metrics.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/mongodb/metrics-data-list.mdx","sourceDirName":"mongodb","slug":"/mongodb/metrics-data-list","permalink":"/whatap-docs/en/mongodb/metrics-data-list","draft":false,"unlisted":false,"editUrl":"undefined/docs/mongodb/metrics-data-list.mdx","tags":[],"version":"current","frontMatter":{"id":"metrics-data-list","title":"MongoDB Metrics","description":"It guides you to MongoDB metrics.","keywords":["MongoDB","Metrics","DATABASE"],"isTranslationMissing":false},"sidebar":"mongodbSidebar","previous":{"title":"Metrics","permalink":"/whatap-docs/en/mongodb/metrics-intro"},"next":{"title":"Metrics Chart","permalink":"/whatap-docs/en/mongodb/metrics-chart-v2"}}'),d=r(74848),n=r(84429),c=r(1179),i=r(56141);let o={id:"metrics-data-list",title:"MongoDB Metrics",description:"It guides you to MongoDB metrics.",keywords:["MongoDB","Metrics","DATABASE"],isTranslationMissing:!1},l,h={},x=[...c.RM,{value:"db_mongodb_counter",id:"db_mongodb_counter",level:2},{value:"Tags",id:"db_mongodb_counter-tags",level:3},{value:"Field",id:"db_mongodb_counter-filed",level:3},...i.RM];function a(e){let s={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",section:"section",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(s.p,{children:"Database metrics are comprehensive data collected for database workloads and resource usages. The WhaTap monitoring service continuously collects metrics to identify bottlenecks in the database and provides data to help identify the root causes of performance issues."}),"\n",(0,d.jsxs)(s.p,{children:["MongoDB collects key metrics from ",(0,d.jsx)(s.code,{children:"db.serverStatus"}),", and the following lists the descriptions for the collected key metrics: For more information about other metrics, see ",(0,d.jsx)(s.a,{href:"https://www.mongodb.com/docs/manual/reference/command/serverStatus/#output/",children:"the following"}),"."]}),"\n","\n",(0,d.jsxs)("div",{className:"metricslist",children:[(0,d.jsx)(c.Ay,{}),(0,d.jsx)(s.section,{className:"remark-sectionize-h2",children:(0,d.jsx)(s.h2,{id:"db_mongodb_counter",children:"db_mongodb_counter"})}),(0,d.jsxs)(s.section,{className:"remark-sectionize-h3",children:[(0,d.jsx)(s.h3,{id:"db_mongodb_counter-tags",children:"Tags"}),(0,d.jsxs)(s.p,{children:["The following lists the tags that are collected in the ",(0,d.jsx)(s.code,{children:"db_mongodb_counter"})," category."]}),(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Tag name"}),(0,d.jsx)(s.th,{children:"Description"}),(0,d.jsx)(s.th,{children:"Remarks"})]})}),(0,d.jsx)(s.tbody,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"oname"})}),(0,d.jsx)(s.td,{children:"Agent name"}),(0,d.jsx)(s.td,{children:"Unique value"})]})})]})]}),(0,d.jsxs)(s.section,{className:"remark-sectionize-h3",children:[(0,d.jsx)(s.h3,{id:"db_mongodb_counter-filed",children:"Field"}),(0,d.jsxs)(s.p,{children:["The following lists the fields that are collected in the ",(0,d.jsx)(s.code,{children:"db_mongodb_counter"})," category."]}),(0,d.jsx)("div",{className:"db-metric",children:(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Metrics"}),(0,d.jsx)(s.th,{children:"Description"})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"accepted$tcpFastOpen$network"})}),(0,d.jsx)(s.td,{children:"Number of network connections accepted via TCP Fast Open."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"active$connections"})}),(0,d.jsx)(s.td,{children:"Number of active clients in progress."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"available$connections"})}),(0,d.jsx)(s.td,{children:"Number of available network connections."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"awaitingTopologyChanges$connections"})}),(0,d.jsx)(s.td,{children:"Number of connections waiting for topology changes."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bytesIn$compressor$snappy$compression$network"})}),(0,d.jsx)(s.td,{children:"Network bytes received via Snappy compression."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bytesIn$compressor$zlib$compression$network"})}),(0,d.jsx)(s.td,{children:"Network bytes received through zlib compression."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bytesIn$compressor$zstd$compression$network"})}),(0,d.jsx)(s.td,{children:"Number of network bytes received via zstd compression."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bytesIn$decompressor$snappy$compression$network"})}),(0,d.jsx)(s.td,{children:"Number of network bytes received via Snappy decompression."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bytesIn$decompressor$zlib$compression$network"})}),(0,d.jsx)(s.td,{children:"Number of network bytes received through zlib decompression."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bytesIn$decompressor$zstd$compression$network"})}),(0,d.jsx)(s.td,{children:"Number of network bytes received via zstd decompression."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bytesIn$network"})}),(0,d.jsx)(s.td,{children:"Total network bytes received by the server via connection from a MongoDB client or other instances."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bytesOut$compressor$snappy$compression$network"})}),(0,d.jsx)(s.td,{children:"Network bytes transmitted via Snappy compression."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bytesOut$compressor$zlib$compression$network"})}),(0,d.jsx)(s.td,{children:"Network bytes transmitted via zlib compression."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bytesOut$compressor$zstd$compression$network"})}),(0,d.jsx)(s.td,{children:"Number of network bytes transmitted via zstd compression."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bytesOut$decompressor$snappy$compression$network"})}),(0,d.jsx)(s.td,{children:"Number of network bytes transmitted via Snappy decompression."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bytesOut$decompressor$zlib$compression$network"})}),(0,d.jsx)(s.td,{children:"Number of network bytes transmitted through zlib decompression."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bytesOut$decompressor$zstd$compression$network"})}),(0,d.jsx)(s.td,{children:"Number of network bytes transmitted via zstd decompression."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bytesOut$network"})}),(0,d.jsx)(s.td,{children:"Total network bytes transmitted by the server via connection from a MongoDB client or other instances."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"clientsInTotal$fixed$serviceExecutors$network"})}),(0,d.jsx)(s.td,{children:"Total number of clients processed in the fixed service executors."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"clientsInTotal$passthrough$serviceExecutors$network"})}),(0,d.jsx)(s.td,{children:"Total number of clients processed in the passthrough service executors."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"clientsRunning$fixed$serviceExecutors$network"})}),(0,d.jsx)(s.td,{children:"Total number of clients being run in the fixed service executors."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"clientsRunning$passthrough$serviceExecutors$network"})}),(0,d.jsx)(s.td,{children:"Total number of clients being run in the passthrough service executors."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"clientsWaitingForData$fixed$serviceExecutors$network"})}),(0,d.jsx)(s.td,{children:"Total number of clients waiting for data in the fixed service executors."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"clientsWaitingForData$passthrough$serviceExecutors$network"})}),(0,d.jsx)(s.td,{children:"Number of clients waiting for data in the passthrough service executors."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"command$opcounters"})}),(0,d.jsx)(s.td,{children:"Total number of commands executed in the database."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"connect_error"})}),(0,d.jsx)(s.td,{children:"Number of connection errors."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"cpu"})}),(0,d.jsxs)(s.td,{children:["CPU utilization calculated using the ",(0,d.jsx)(s.code,{children:"user_time_us"})," and ",(0,d.jsx)(s.code,{children:"system_time_us"})," values in the ",(0,d.jsx)(s.code,{children:"extra_info"})," metric."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"cpu_cores"})}),(0,d.jsx)(s.td,{children:"Number of available CPU cores"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"cpu_sys"})}),(0,d.jsx)(s.td,{children:"CPU time used in the system."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"cpu_user"})}),(0,d.jsx)(s.td,{children:"CPU time used for user tasks."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"current$connections"})}),(0,d.jsx)(s.td,{children:"Total number of clients connected to the current server."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"delete$opcounters"})}),(0,d.jsx)(s.td,{children:"Number of delete commands processed."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"exhaustHello$connections"})}),(0,d.jsx)(s.td,{children:"Number of connections associated with the the exhaustHello message."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"exhaustIsMaster$connections"})}),(0,d.jsx)(s.td,{children:"Number of connections associated with the exhaustIsMaster message."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"fatal count"})}),(0,d.jsx)(s.td,{children:"Number of fatal errors."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"getmore$opcounters"})}),(0,d.jsx)(s.td,{children:"Number of getMore operations processed."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"input_blocks$extra_info"})}),(0,d.jsx)(s.td,{children:"Input block value of the system."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"insert$opcounters"})}),(0,d.jsx)(s.td,{children:"Number of Insert commands processed."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"involuntary_context_switches$extra_info"})}),(0,d.jsx)(s.td,{children:"Additional information regarding the number of forced context switches."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"kernelSetting$tcpFastOpen$network"})}),(0,d.jsx)(s.td,{children:"Kernel configuration status for TCP Fast Open."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"latency$commands$opLatencies"})}),(0,d.jsx)(s.td,{children:"Latency for database commands."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"latency$reads$opLatencies"})}),(0,d.jsx)(s.td,{children:"Latency for read operations."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"latency$transactions$opLatencies"})}),(0,d.jsx)(s.td,{children:"Latency for processing transactions."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"latency$writes$opLatencies"})}),(0,d.jsx)(s.td,{children:"Latency for write operations."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"maximum_resident_set_kb$extra_info"})}),(0,d.jsx)(s.td,{children:"Additional information regarding the maximum resident set size (KB)."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"msg$asserts"})}),(0,d.jsx)(s.td,{children:"Number of message assertions occurred."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"node_state"})}),(0,d.jsx)(s.td,{children:"Current state of the node."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"numRequests$network"})}),(0,d.jsx)(s.td,{children:"Total number of network requests received by the server."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"numSlowDNSOperations$network"})}),(0,d.jsx)(s.td,{children:"Number of slow DNS operations."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"numSlowSSLOperations$network"})}),(0,d.jsx)(s.td,{children:"Number of slow SSL operations."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"ops$commands$opLatencies"})}),(0,d.jsx)(s.td,{children:"Number of command operations processed."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"ops$reads$opLatencies"})}),(0,d.jsx)(s.td,{children:"Number of read operations processed."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"ops$transactions$opLatencies"})}),(0,d.jsx)(s.td,{children:"Number of transaction operations processed."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"ops$writes$opLatencies"})}),(0,d.jsx)(s.td,{children:"Number of write operations processed."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"output_blocks$extra_info"})}),(0,d.jsx)(s.td,{children:"Output block value of the system."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"page_faults$extra_info"})}),(0,d.jsx)(s.td,{children:"Additional information regarding the page faults."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"page_reclaims$extra_info"})}),(0,d.jsx)(s.td,{children:"Additional information regarding the page reclaims."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"physicalBytesIn$network"})}),(0,d.jsx)(s.td,{children:"Physical bytes received."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"physicalBytesOut$network"})}),(0,d.jsx)(s.td,{children:"Physical bytes transmitted."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"query$opcounters"})}),(0,d.jsx)(s.td,{children:"Number of query commands processed."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"readers$activeClients$globalLock"})}),(0,d.jsx)(s.td,{children:"Number of active read clients (global lock)."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"readers$currentQueue$globalLock"})}),(0,d.jsx)(s.td,{children:"Number of waiting read clients (global lock)."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"regular$asserts"})}),(0,d.jsx)(s.td,{children:"Number of general assertions occurred."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"replication_delay_max"})}),(0,d.jsx)(s.td,{children:"Maximum replication delay time."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"resident$mem"})}),(0,d.jsx)(s.td,{children:"Actual memory size in use."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"rollovers$asserts"})}),(0,d.jsx)(s.td,{children:"Number of rollover assertions occurred."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"system_time_us$extra_info"})}),(0,d.jsx)(s.td,{children:"Additional information regarding the system time (microseconds)."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"threaded$connections"})}),(0,d.jsx)(s.td,{children:"Number of thread-based connections."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"threadsRunning$fixed$serviceExecutors$network"})}),(0,d.jsx)(s.td,{children:"Number of threads being run in the fixed service executors."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"threadsRunning$passthrough$serviceExecutors$network"})}),(0,d.jsx)(s.td,{children:"Number of threads being run in the passthrough service executors."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"total$activeClients$globalLock"})}),(0,d.jsx)(s.td,{children:"Number of active all clients (global lock)."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"total$currentQueue$globalLock"})}),(0,d.jsx)(s.td,{children:"Number of all waiting clients (global lock)."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"totalCreated$connections"})}),(0,d.jsx)(s.td,{children:"Total number of created connections."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"totalTime$globalLock"})}),(0,d.jsx)(s.td,{children:"Total time spent on global lock."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"tripwire$asserts"})}),(0,d.jsx)(s.td,{children:"Number of tripwire assertions occurred."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"update$opcounters"})}),(0,d.jsx)(s.td,{children:"Number of update commands processed."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"user$asserts"})}),(0,d.jsx)(s.td,{children:"Number of user assertions occurred."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"user_time_us$extra_info"})}),(0,d.jsx)(s.td,{children:"Additional information regarding the user time (microseconds)."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"virtual$mem"})}),(0,d.jsx)(s.td,{children:"Virtual memory size in use."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"voluntary_context_switches$extra_info"})}),(0,d.jsx)(s.td,{children:"Additional information regarding the number of voluntary context switches."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"warning count"})}),(0,d.jsx)(s.td,{children:"Number of warnings."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"warning$asserts"})}),(0,d.jsx)(s.td,{children:"Number of warning assertions occurred."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"writers$activeClients$globalLock"})}),(0,d.jsx)(s.td,{children:"Number of active write clients (global lock)."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"writers$currentQueue$globalLock"})}),(0,d.jsx)(s.td,{children:"Number of waiting write clients (global lock)."})]})]})]})}),(0,d.jsx)(s.admonition,{type:"note",children:(0,d.jsx)(s.p,{children:"WhaTap basically stores the client-related information."})}),(0,d.jsx)(i.Ay,{})]})]})]})}function j(e={}){let{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,d.jsx)(s,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}},84429:function(e,s,r){r.d(s,{R:()=>c,x:()=>i});var t=r(96540);let d={},n=t.createContext(d);function c(e){let s=t.useContext(n);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:c(e.components),t.createElement(n.Provider,{value:s},e.children)}}}]);